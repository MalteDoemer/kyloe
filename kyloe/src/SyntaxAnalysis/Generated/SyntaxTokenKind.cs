
namespace Kyloe.Syntax
{
    public enum SyntaxTokenKind : int
    {
        End = -1,
        Error = -2,
        Epsilon = -3,
        Comma = -4,
        Dot = -5,
        Colon = -6,
        SemiColon = -7,
        SmallArrow = -8,
        LessEqual = -9,
        Less = -10,
        GreaterEqual = -11,
        Greater = -12,
        DoubleEqual = -13,
        NotEqual = -14,
        PlusEqual = -15,
        MinusEqual = -16,
        StarEqual = -17,
        SlashEqual = -18,
        PercentEqual = -19,
        AmpersandEqual = -20,
        PipeEqual = -21,
        HatEqual = -22,
        Equal = -23,
        Plus = -24,
        Minus = -25,
        Star = -26,
        Slash = -27,
        Percent = -28,
        DoubleAmpersand = -29,
        Ampersand = -30,
        DoublePipe = -31,
        Pipe = -32,
        Hat = -33,
        Tilde = -34,
        Bang = -35,
        LeftParen = -36,
        RightParen = -37,
        LeftSquare = -38,
        RightSquare = -39,
        LeftCurly = -40,
        RightCurly = -41,
        Int = -42,
        Float = -43,
        Bool = -44,
        String = -45,
        VarKeyword = -46,
        ConstKeyword = -47,
        IfKeyword = -48,
        ElseKeyword = -49,
        FuncKeyword = -50,
        Identifier = -51,
        Whitespace = -52,
        LineComment = -53,
        BlockComment = -54,
        Discard = 1,
        Start = 2,
        Stop = 3,
        CompilationUnit = 4,
        TopLevelItem = 5,
        FunctionDefinition = 6,
        TrailingTypeClause = 7,
        OptionalParameters = 8,
        Parameters = 9,
        ParameterDeclaration = 10,
        TypeClause = 11,
        Statement = 12,
        ExpressionStatement = 13,
        BlockStatement = 14,
        RepeatedStatement = 15,
        IfStatement = 16,
        OptionalElseStatement = 17,
        ElseStatement = 18,
        IfStatementOrBlockStatement = 19,
        DeclarationStatement = 20,
        Expression = 21,
        AssignmentHelper = 22,
        Assignment = 23,
        LogicalOr = 24,
        LogicalAnd = 25,
        BitOr = 26,
        BitXor = 27,
        BitAnd = 28,
        Equality = 29,
        Comparison = 30,
        Sum = 31,
        Mult = 32,
        Prefix = 33,
        Postfix = 34,
        Arguments = 35,
        Primary = 36,
        Parenthesized = 37,
    }
}
